---
- name: Download the ZOO-Project
  subversion: repo=http://zoo-project.org/svn/trunk dest={{srcdir}}/zoo export=True force=True
  register: zookdownloaded

- name: Fix the ZOO-Kernel version to latest-trunk
  shell: sed "s:\`svnversion\`:$(LC_ALL="C" svn info http://zoo-project.org/svn/trunk | grep "Rev:" | cut -d':' -f2):g" -i {{srcdir}}/zoo/zoo-project/zoo-kernel/Makefile.in
  register: zookdownloaded

- name: Build and Install ZOO-Kernel from ZOO-Project
  when: zookdownloaded|success
  shell: cd {{srcdir}}/zoo/thirds/cgic206 && sed "s:lib64:lib:g" -i Makefile && make && cd {{srcdir}}/zoo/zoo-project/zoo-kernel && autoconf && ./configure --with-mapserver={{srcdir}}/mapserver-6.2.0/ --with-python --with-pyvers=2.7 --with-js=/usr/ --with-xsltconfig=/usr/bin/xslt-config &&  sed "s:/usr/lib/x86_64-linux-gnu/libapr-1.la::g;s:/usr/lib/i386-linux-gnu/libapr-1.la::g" -i ZOOMakefile.opts && make &&  make install &&  ldconfig && cp zoo_loader.cgi ../../../mapmint/mapmint-services/
  register: zookinstalled

- name: Build and Install OGR ZOO-Services from ZOO-Project
  when: zookinstalled|success
  shell: cd {{srcdir}}/zoo/zoo-project/zoo-services/ogr && cd ogr2ogr && make && cp cgi-env/* {{srcdir}}/mapmint/mapmint-services/vector-converter/ && cd .. && cd base-vect-ops && make && cp cgi-env/* {{srcdir}}/mapmint/mapmint-services/vector-tools/
  register: zooosinstalled

- name: Build and Install GDAL ZOO-Services from ZOO-Project
  when: zooosinstalled|success
  shell: cd {{srcdir}}/zoo/zoo-project/zoo-services/gdal && for i in contour dem grid profile translate warp ; do echo $i ; cd $i ; make; cp cgi-env/* {{srcdir}}/mapmint/mapmint-services/raster-tools/ ; cd .. ; done
  register: zoogsinstalled

- name: Download the qrencode library source code
#  get_url: url=http://fukuchi.org/works/qrencode/qrencode-3.4.1.tar.gz dest={{srcdir}}/qrencode-3.4.1.tar.gz
  shell: wget http://fukuchi.org/works/qrencode/qrencode-3.4.1.tar.gz -O {{srcdir}}/qrencode-3.4.1.tar.gz

- name: Download, build and install the qrencode library / binaries
  when: zoogsinstalled
  shell: cd {{srcdir}}/ && tar xvf qrencode-3.4.1.tar.gz && cd qrencode-3.4.1 && ./configure && make && make install
  notify:
    - Update ldconfig
  register: qrlibinstalled

- name: Build and Install QREncode ZOO-Services from ZOO-Project
  when: qrlibinstalled|success
  shell: cd {{srcdir}}/zoo/zoo-project/zoo-services/qrencode && make; cp cgi-env/* {{srcdir}}/mapmint/mapmint-services/ ; cd .. ;
  register: zooqsinstalled

- name: Build MapMint C ZOO-Services
  when: zooqsinstalled|success
  shell: cd {{srcdir}}/mapmint/mapmint-services; for i in *-src ; do echo $i; cd $i; autoconf; ./configure --with-zoo-kernel={{srcdir}}/zoo/zoo-project/zoo-kernel --with-mapserver={{srcdir}}/mapserver-6.2.0 ; make ; cd .. ; done
  register: zoomcsinstalled

- copy: src=mapmint/files/apache2.conf dest=/etc/apache2/apache2.conf

- shell: sed "s:+SymLinksIfOwnerMatch:+FollowSymLinks:g" -i /etc/apache2/conf-available/serve-cgi-bin.conf

- name: Create .htaccess files
  copy: src=mapmint/files/{{item}}.htaccess dest={{srcdir}}/mapmint/mapmint-ui/{{item}}/.htaccess
  with_items:
      - 
      - img
      - openlayers
      - js
      - templates/preview

- name: Activate required Apache modules
  apache2_module: state=present name={{item}}
  with_items:
      - fcgid
      - cgid
      - rewrite
  notify:
    - Reload Apache

- file: src={{srcdir}}/mapmint/mapmint-ui/ dest={{rootdir}}/ui owner=www-data group=www-data state=link
- file: src={{srcdir}}/mapmint/public_map/ dest={{rootdir}}/pm owner=www-data group=www-data state=link

- name: Create Data directory
  file: dest={{datadir}} mode=775 state=directory owner=www-data group=www-data

- name: download mm.db SQLite database
  get_url: url=http://geolabs.fr/dl/mm.db dest={{datadir}}/mm.db

- name: Trust auth for local access
  copy: src=mapmint/files/pg_hba.conf dest=/etc/postgresql/{{pgvers}}/main/pg_hba.conf
  notify:
    - Reload PostgreSQL


- name: Restart PG
  service: name=postgresql state=reloaded
  register: pgrestarted


- postgresql_db: name=mmdb
                 encoding='UTF-8'

- postgresql_ext: name=postgis db=mmdb
  notify:
    - Reload PostgreSQL

- name: Create initial PG Database
  when: pgrestarted|success
  shell: export PGUSER=postgres; psql mmdb -f {{srcdir}}/mapmint/template/sql/mmdb.sql && psql mmdb -f {{srcdir}}/mapmint/template/sql/indicators.sql && psql mmdb -f {{srcdir}}/mapmint/template/sql/tables.sql


- name: Download minimal Senegal dataset
  get_url: url=http://download.gisgraphy.com/openstreetmap/pbf/SN.tar.bz2 dest={{datadir}}/SN.tar.bz2

- name: Create the SN data directory
  file: dest={{datadir}}/SN mode=775 state=directory owner=www-data group=www-data

- name: Uncompress the Senegal dataset
  unarchive: copy=no src={{datadir}}/SN.tar.bz2 dest={{datadir}}/SN owner=www-data

- name: Move SN to sn.pbf
  command: creates="{{datadir}}/SN/sn.pbf" mv {{datadir}}/SN/SN {{datadir}}/SN/sn.pbf


- name: Create MapMint data directories
  file: dest=/var/{{item}} mode=775 state=directory owner=www-data group=www-data
  with_items:
      - data/templates
      - data/dirs
      - data/public_maps
      - data/georeferencer_maps
      - data/fonts
      - www/html/tmp/descriptions
      - www/html/pm/styles
      - cache/zoo-project

- shell: cd {{srcdir}}/mapmint/template/data && tar -cjpf ../data.tar.bz2 ./

- name: Copy template MapMint data directories
  unarchive: copy=no src={{srcdir}}/mapmint/template/data.tar.bz2 dest={{datadir}}/ owner=www-data

- name: Create MapMint default database datastore
  copy: src=mapmint/files/mmdb.xml dest={{datadir}}/PostGIS/mmdb.xml 

- name: Import sn.pbf in the database
  shell: ogr2ogr -f PostgreSQL "$(xsltproc {{datadir}}/PostGIS/conn.xsl {{datadir}}/PostGIS/mmdb.xml)" {{datadir}}/SN/sn.pbf

- name: Define Spherical-mercator
  lineinfile: dest=/usr/share/proj/epsg line="<900913> +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs <>"

- name: Set privileges to required directories
  file: dest={{item}} mode=775 recurse=yes state=directory owner=www-data group=www-data
  with_items:
      - "{{datadir}}"
      - "{{rootdir}}/pm/styles"
#      - "{{rootdir}}/tmp"

- name: Create the ZOO-Kernel main.cfg
  template: src=main.cfg.j2 dest=/usr/lib/cgi-bin/mm/main.cfg owner=www-data group=www-data

- name: download Fonts used in MapMint
  get_url: url=http://geolabs.fr/dl/fonts.tar.bz2 dest={{datadir}}/fonts.tar.bz2

- name: Install MapMint fonts
  unarchive: copy=no src={{datadir}}/fonts.tar.bz2 dest={{datadir}}/fonts

- name: Download LibreOffice
  get_url: url=http://download.documentfoundation.org/libreoffice/stable/{{lo_version}}/deb/{{larch}}/LibreOffice_{{lo_version}}_Linux_{{larch}}_deb.tar.gz dest={{srcdir}}

- name: Uncompress LibreOffice 
  unarchive: copy=no src={{srcdir}}/LibreOffice_{{lo_version}}_Linux_{{larch}}_deb.tar.gz dest={{srcdir}}/ owner=www-data

- name: Install LibreOffice
  shell: cd {{srcdir}}/LibreOffice_{{lo_version}}.*_Linux_{{larch}}_deb/DEBS ; dpkg -i *.deb

- name: Install LibreOffice Server init script
  copy: src=mapmint/files/mapmint-libreoffice-server dest=/etc/init.d/mapmint-libreoffice-server
  notify:
    - Restart LibreOffice Server

- name: Set privileges to required files
  file: dest={{item}} mode=775 state=touch owner=www-data group=www-data
  with_items:
      - /usr/lib/cgi-bin/mm/main.cfg
      - /usr/lib/cgi-bin/mm/mapcache.xml
      - /var/www/html/tmp/MainDescriptionMM1441755467.html

- name: Add execute privileges to required files
  file: dest={{item}} mode=775 state=touch owner=root group=root
  with_items:
      - /etc/init.d/mapmint-libreoffice-server
  notify:
    - Restart LibreOffice Server

